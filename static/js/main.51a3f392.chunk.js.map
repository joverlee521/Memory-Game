{"version":3,"sources":["components/Navbar/index.js","components/CardsWrapper/index.js","components/MessageWrapper/index.js","components/ImageCard/index.js","components/Footer/index.js","App.js","index.js"],"names":["NavBar","props","message","winLose","react_default","a","createElement","className","src","concat","process","id","alt","score","topScore","CardsWrapper","children","MessageWrapper","image","onClick","restart","type","ImageCard","clickState","character","name","Footer","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateScore","clickedArray","currentScore","state","console","log","setState","length","characters","updateTopScore","clicked","currentTopScore","resetGame","includes","push","renderCharacters","shuffle","map","components_ImageCard","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","content","components_MessageWrapper","components_CardsWrapper","Navbar","components_Footer","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.51a3f392.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction NavBar(props){\n    const winLose = props.winLose;\n    let message;\n    if(winLose === \"win\"){\n        message = \"You Win!\"\n    }\n    else if(winLose === \"lose\"){\n        message = \"You Lost!\"\n    }\n    else{\n        message = \"Click an image to start!\"\n    }\n    return(\n        <ul className=\"nav sticky-top justify-content-between align-items-center flex-lg-row flex-column px-3\">\n            <li className=\"nav-item\">\n                <img src={`${process.env.PUBLIC_URL}/images/my-hero-logo.png`} id=\"nav-img\" alt=\"My Hero Academia\"/>\n            </li>\n            <li className=\"nav-item text-white h3\">\n                {message}\n            </li>\n            <li className=\"nav-item text-white h4\">Score: {props.score} | Top Score: {props.topScore}</li>\n        </ul>\n    );\n}\n\nexport default NavBar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction CardsWrapper(props){\n    return <div className=\"container card-wrapper\">{props.children}</div>\n}\n\nexport default CardsWrapper;","import React from \"react\";\nimport \"./style.css\"\n\nfunction MessageWrapper(props){\n    const winLose = props.winLose;\n    let image;\n    if(winLose === \"win\"){\n        image = <img src={`${process.env.PUBLIC_URL}/images/win.gif`} alt=\"Win GIF\"/>\n    }\n    else if(winLose === \"lose\"){\n        image = <img src={`${process.env.PUBLIC_URL}}/images/lose.gif`} alt=\"Lose GIF\"/>\n    }\n    return(\n        <div className=\"messageWrapper\">\n            {image}\n            <button onClick={props.restart}type=\"button\" className=\"btn btn-primary my-3\">Restart Game</button>\n        </div>\n    )\n}\n\nexport default MessageWrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction ImageCard(props){\n    return(\n        <div className=\"card character-card\" onClick={() => props.clickState(props.character.id)}>\n            <img className=\"card-img img-custom\" src={`${process.env.PUBLIC_URL}` + props.character.image} alt={props.character.name}/>\n        </div>\n    );\n}\n\nexport default ImageCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer(){\n    return(\n        <footer>\n            <div className=\"row\">\n                <div className=\"col\">\n                    \n                </div>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer;","import React, { Component } from \"react\";\nimport NavBar from \"./components/Navbar\";\nimport CardsWrapper from \"./components/CardsWrapper\";\nimport MessageWrapper from \"./components/MessageWrapper\";\nimport ImageCard from \"./components/ImageCard\";\nimport Footer from \"./components/Footer\";\nimport characters from \"./characters.json\";\nimport \"./App.css\"\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      score: 0,\n      topScore: 0,\n      clicked: [],\n      winLose: \"\"\n    }\n  }\n\n  updateScore = (clickedArray) => {\n    let currentScore = this.state.score;\n    currentScore++;\n    console.log(currentScore);\n    this.setState({score: currentScore}, () => {\n      if(clickedArray.length === characters.length){\n        this.updateTopScore();\n        this.setState({winLose: \"win\", clicked: []});\n      }\n      else{\n        this.setState({clicked: clickedArray});\n      }\n    });\n  }\n\n  updateTopScore = () => {\n    let currentScore = this.state.score;\n    console.log(currentScore);\n    let currentTopScore = this.state.topScore;\n    if(currentScore > currentTopScore){\n      currentTopScore = currentScore;\n      this.setState({topScore: currentTopScore});\n    }\n    this.setState({score: 0});\n  }\n\n  resetGame = () => {\n    this.setState({winLose: \"\"});\n  }\n\n  clickState = id => {\n    const clickedArray = this.state.clicked;\n    if(clickedArray.includes(id)){\n      this.updateTopScore();\n      this.setState({winLose: \"lose\", clicked: []})\n    }\n    else{\n      clickedArray.push(id);\n      this.updateScore(clickedArray);\n    }\n  }\n\n  shuffle(array) {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n  }\n\n  renderCharacters = () => {\n    const shuffledCharacters = this.shuffle(characters);\n    return shuffledCharacters.map(character => <ImageCard character={character} clickState={this.clickState}/>);\n  }\n\n  render() {\n    let content;\n    if(this.state.winLose.length > 0){\n      content = <MessageWrapper winLose={this.state.winLose} restart={this.resetGame}/>\n    }\n    else{\n      content = <CardsWrapper>{this.renderCharacters()}</CardsWrapper>\n    }\n    return (\n      <div className=\"wrapper\">\n        <NavBar score={this.state.score} topScore={this.state.topScore} winLose={this.state.winLose}/>\n        <div className=\"content\">\n          {content}\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}